openapi: 3.0.0
info:
  title: ImmoDB API
  description: API for the database of our real estate website
  version: 1.0.0
servers:
  - url: http://localhost:8080

paths:

  /immos:
    get:
      summary: Get all real estate agencies
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                immos:
                  - id: 1
                    name: Example Agency
                    address_id: 1
                    logo: null
                    link: http://example-agency.com
                    active: 1
                    verified: 1

    post:
      summary: Create a new real estate agency
      requestBody:
        required: true
        content:
          application/json:
            example:
              name: New Agency
              address_id: 2
              logo: null
              link: http://new-agency.com
              active: 1
              verified: 0
      responses:
        '201':
          description: Agency created successfully
          content:
            application/json:
              example:
                id: 2
                name: New Agency
                address_id: 2
                logo: null
                link: http://new-agency.com
                active: 1
                verified: 0
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                error: Bad request, please check your input data
                parameters:
                  - name: field1
                    in: query
                    description: The first field that caused the error
                    schema:
                      type: string

  /immos/{id}:
    get:
      summary: Get real estate agency by ID
      parameters:
        - name: id
          in: path
          description: ID of the real estate agency
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                id: 1
                name: Example Agency
                address_id: 1
                logo: null
                link: http://example-agency.com
                active: 1
                verified: 1
        '404':
          description: Agency not found
          content:
            application/json:
              example:
                error: Agency not found
                parameters:
                  - name: id
                    in: path
                    description: The ID of the agency that was not found
                    schema:
                      type: integer

    patch:
      summary: Update real estate agency by ID
      parameters:
        - name: id
          in: path
          description: ID of the real estate agency
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            example:
              name: Updated Agency
              address_id: 3
              logo: null
              link: http://updated-agency.com
              active: 1
              verified: 1
      responses:
        '200':
          description: Agency updated successfully
          content:
            application/json:
              example:
                id: 1
                name: Updated Agency
                address_id: 3
                logo: null
                link: http://updated-agency.com
                active: 1
                verified: 1
        '404':
          description: Agency not found
          content:
            application/json:
              example:
                error: Agency not found
                parameters:
                  - name: id
                    in: path
                    description: The ID of the agency that was not found
                    schema:
                      type: integer

    delete:
      summary: Delete real estate agency by ID
      parameters:
        - name: id
          in: path
          description: ID of the real estate agency
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Agency deleted successfully
        '404':
          description: Agency not found
          content:
            application/json:
              example:
                error: Agency not found
                parameters:
                  - name: id
                    in: path
                    description: The ID of the agency that was not found
                    schema:
                      type: integer

  /users:
    get:
      summary: Get all users
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                users:
                  - id: 1
                    username: user1
                    password: Azerty123
                    email: user1@example.com
                    role_id: 2
                    immo_id: 1
                  - id: 2
                    username: user2
                    password: Azerty123
                    email: user2@example.com
                    role_id: 3
                    immo_id: null

    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            example:
              username: newUser
              password: newPassword
              email: newUser@example.com
              role_id: 2
              immo_id: null
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              example:
                id: 3
                username: newUser
                email: newUser@example.com
                role_id: 2
                immo_id: null
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                error: Bad request, please check your input data
                parameters:
                  - name: field1
                    in: query
                    description: The first field that caused the error
                    schema:
                      type: string

  /users/{id}:
    get:
      summary: Get user by ID
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                id: 1
                username: user1
                email: user1@example.com
                role_id: 2
                immo_id: 1
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: User not found
                parameters:
                  - name: id
                    in: path
                    description: The ID of the user that was not found
                    schema:
                      type: integer

    patch:
      summary: Update user by ID
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            example:
              username: updatedUser
              password: updatedPassword
              email: updatedUser@example.com
              role_id: 3
              immo_id: 2
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              example:
                id: 1
                username: updatedUser
                email: updatedUser@example.com
                role_id: 3
                immo_id: 2
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: User not found
                parameters:
                  - name: id
                    in: path
                    description: The ID of the user that was not found
                    schema:
                      type: integer

    delete:
      summary: Delete user by ID
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: User not found
                parameters:
                  - name: id
                    in: path
                    description: The ID of the user that was not found
                    schema:
                      type: integer

  /listings:
    get:
      summary: Get all listings
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                listings:
                  - id: 1
                    address_id: 1
                    price: 100000.00
                    immo_id: 1
                    status: available
                    contract: sale
                    description: Example listing description
                    total_area: 120.00

    post:
      summary: Create a new listing
      requestBody:
        required: true
        content:
          application/json:
            example:
              address_id: 1
              price: 120000.00
              immo_id: 1
              status: available
              contract: sale
              description: New listing description
              total_area: 150.00
      responses:
        '201':
          description: Listing created successfully
          content:
            application/json:
              example:
                id: 2
                address_id: 1
                price: 120000.00
                immo_id: 1
                status: available
                contract: sale
                description: New listing description
                total_area: 150.00
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                error: Bad request, please check your input data
                parameters:
                  - name: field1
                    in: query
                    description: The first field that caused the error
                    schema:
                      type: string

  /listings/{id}:
    get:
      summary: Get listing by ID
      parameters:
        - name: id
          in: path
          description: ID of the listing
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                id: 1
                address_id: 1
                price: 100000.00
                immo_id: 1
                status: available
                contract: sale
                description: Example listing description
                total_area: 120.00
        '404':
          description: Listing not found
          content:
            application/json:
              example:
                error: Listing not found
                parameters:
                  - name: id
                    in: path
                    description: The ID of the listing that was not found
                    schema:
                      type: integer

    patch:
      summary: Update listing by ID
      parameters:
        - name: id
          in: path
          description: ID of the listing
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            example:
              address_id: 1
              price: 130000.00
              immo_id: 2
              status: reserved
              contract: rent
              description: Updated listing description
              total_area: 160.00
      responses:
        '200':
          description: Listing updated successfully
          content:
            application/json:
              example:
                id: 1
                address_id: 1
                price: 130000.00
                immo_id: 2
                status: reserved
                contract: rent
                description: Updated listing description
                total_area: 160.00
        '404':
          description: Listing not found
          content:
            application/json:
              example:
                error: Listing not found
                parameters:
                  - name: id
                    in: path
                    description: The ID of the listing that was not found
                    schema:
                      type: integer

    delete:
      summary: Delete listing by ID
      parameters:
        - name: id
          in: path
          description: ID of the listing
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Listing deleted successfully
        '404':
          description: Listing not found
          content:
            application/json:
              example:
                error: Listing not found
                parameters:
                  - name: id
                    in: path
                    description: The ID of the listing that was not found
                    schema:
                      type: integer

components:
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          example:
            error: Bad request, please check your input data
            parameters:
              - name: field1
                in: query
                description: The first field that caused the error
                schema:
                  type: string
    NotFound:
      description: Not Found
      content:
        application/json:
          example:
            error: Resource not found
            parameters:
              - name: id
                in: path
                description: The ID of the resource that was not found
                schema:
                  type: integer
    Unauthorized:
      description: Not Authorized
      content:
        application/json:
          example:
            error: Not authorized
    MethodNotAllowed:
      description: Method Not Allowed
      content:
        application/json:
          example:
            error: Method not allowed for this resource
    UnsupportedMediaType:
      description: Unsupported Media Type
      content:
        application/json:
          example:
            error: Unsupported media type
    UnprocessableEntity:
      description: Unprocessable Entity
      content:
        application/json:
          example:
            error: Validation failed
            parameters:
              - name: field1
                in: query
                description: The first field that caused the validation failure
                schema:
                  type: string
    TooManyRequests:
      description: Too Many Requests
      content:
        application/json:
          example:
            error: Too many requests
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          example:
            error: Internal server error, please contact support
